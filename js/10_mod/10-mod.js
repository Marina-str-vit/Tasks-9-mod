// ======!       ======
// !   1 ! =>    ! 2,3 !  черга фиконанння setTimeout
// !=====!       !=====!
//   /\             !
//    !             \|
// !===================
// !    2, 3          !
// !===================

/**
 *  можливість передати дотаткові параметри в setTimeout
 */

// const logger = (time) => {
//   console.log(`logger ${time}`);
// };

// setTimeout(logger, 1000, "2s"); // logger 2s

/**
 *
 * можливість передати дотаткові параметри в setTimeout у вигляді об'єкта
 */

// const logger = ({ time }) => {
//   console.log(`logger ${time}`);
// };

// setTimeout(logger, 1000, { time: "2s" }); // logger 2s

/**
 *  Інколи потрібно припинити setTimeout завчасно
 *
 * Повертає в місці свого виклику ідентифікатор цього тайм-аута
 *
 * зберегти в якусь зміну - це будь-яка назва
 *
 *  прилітає значення нам абсолютно не важливо
 *
 * далі викликаємо метод
 *
 *  цей метод приймає в себе як аргумент ID ідентифікатора тайм-аута який ми хочемо зупинити і наш тайм-аут вже не запуститься
 */

// const timeId = setTimeout(logger, 1000, { time: "2s" }); // logger 2s

// clearTimeout(timeId);

/**======================================================================== */

/**
 * нижче функція для виведення чисел в консоль за визначенним функцією часом
 * виведеться в консоль 'і' через час затримки - delay, тобто у перша і =3 буде * через 3000мс,
 * потім і = 2 через 2000мс, потім і = 1000 через 1000мс.
 */

// for (let i = 3; i > 0; i--) {
//   console.log(i);
// const delay = i * 1000;

// setTimeout(() => {
//   console.log(i);
// }, delay);
// }

/**========================================================================== */

/**
 * Метод setInterval(callback, delay, args);
 */

// setInterval(() => {
//   console.log("ok");
// }, 2000);   // постійно з інтервалом в 2000мс буде відпрацьовуватися функція

/**
 * використовуємо, коли хочемо, щоб функція виконувалася через певний проміжок часу
 * також можна додавати додаткові аргументи, якащо їх багато, то вводити у вигляді об'єкта
 */

// const logger = () => {
//   console.log(`logger`);
// };

// setInterval(logger, 1500);

/**
 * ЗУПИНКА setInterval
 *
 * підчас виклику, setInterval повертає унікальний ідентифікатор, тому
 * зберігаємо його в змінну і викликаємо
 *
 * МЕТОД clearInterval
 */

// const intervsalId = setInterval(logger, 2000);

// setTimeout(() => {
//   clearInterval(intervsalId);
// }, 5000); // викличеться два рази, потім спрацює видалення

/**
 * ===========================================================
 */
